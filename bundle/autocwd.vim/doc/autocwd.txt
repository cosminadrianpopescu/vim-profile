*autocwd.txt*    Change CWD automatically by patterns when you change the current buffer.
*autocwd*

Author:       yssl <http://github.com/yssl>

==============================================================================
Contents                                                 *autocwd-contents*

         1. Introduction .............................. |autocwd-intro|
         2. Usage ..................................... |autocwd-usage|
         3. Commands .................................. |autocwd-commands|
         4. Motivation ................................ |autocwd-arguments|
         5. Options ................................... |autocwd-options|
         6. Changelog ................................. |autocwd-changelog|

==============================================================================
1. Introduction                                             *autocwd-intro*

autocwd.vim automatically changes the current working directory (CWD) of vim 
when you change the current buffer (or window).
You can define patterns that may be included in a file path or buffer name,
 and corresponding working directories in your .vimrc. 

This plugin requires a version of vim with python support.
You can check your vim with `:echo has('python')`.

==============================================================================
2. Usage                                                    *autocwd-usage*

You can define patterns and working directories in your .vimrc as follows:

```
let g:autocwd_patternwd_pairs = [
	\[pattern1, working_directory1],
	\[pattern2, working_directory2],
	...
	\]
```

- pattern is a substring of a file path or buffer name with Unix shell-style wildcards.  
For example, '\*.vim' matches files with .vim extension and '*/project1/*' matches files 
that contains '/project1/' in their absolute file paths.  
(Please refer https://docs.python.org/2/library/fnmatch.html for more information.
patterns are processed by python's fnmatch function internally.)

- working_directory will be the CWD when the corresponding pattern matches the c
urrent file path or buffer name.  
It can be one of following types:

	type                                 | example: working_directory | example: CWD to be changed
	---                                  | ---                        | ---
	absolute path                        | '~/test'                   | ~/test
	vim's file name modifier (1)         | '%:p:h'                    | current file's directory
	special keyword                      | '*REPO*' (2)               | root directory of the repository containing current file

	(1) Please refer http://vimdoc.sourceforge.net/htmldoc/cmdline.html#filename-modifiers for more information.  
	(2) '*REPO*' is replaced with the root directory of the repository containing current file.  
	- Examples:  
		If the directory structure looks like this:
		```
		+-- ~/code 
		|	+-- bin
		|	+-- examples
		|	|	+-- .git
		|	|	+-- ex1
		| 	|	|	+-- current file
		```
	- '\*REPO\*' : ~/code/examples
	- '\*REPO\*/ex1' : ~/code/examples/ex1
	- '\*REPO\*/..' : ~/code

- If the current buffer matches one of the defined patterns, the CWD will 
be changed to the corresponding working directory.
Otherwise, the default working directory that have been the CWD before 
applying `g:autocwd_patternwd_pairs` will be restored.  
You can change the default working directory by `:cd` or other CWD-changing 
commands (e.g., 'cd' of the NERDTree) when the current buffer does not 
match any of predefined patterns.

- The order of patterns in `g:autocwd_patternwd_pairs` is meaningful.
If the current buffer matches both first and second patterns, the working 
directory corresponding to the first pattern will be the CWD.


==============================================================================
3. Commands                                              *autocwd-commands*

*:AutoCWDPrint*  
Print the buffer name or file path, matched pattern, and working directory 
of windows in the current tab.
You can jump to one of the listed windows by typing the index(#) of the window.

There is no activation commands for autocwd.vim. 
If you install this plugin, it will starts to manage the CWD.

==============================================================================
4. Motivation                                           *autocwd-arguments*

It is quite useful to set the CWD for each opened file in vim.
Vim provides `:lcd` command for this purpose. 
However, it cannot deal with opening other files in the same window because `:lcd` is applied to a specific window, not buffer.  

autocwd.vim is designed to solve this problem.
Moreover, it provides more convenient way to set CWDs with Unix shell-style patterns.

==============================================================================
5. Options                                                *autocwd-options*

*g:autocwd_patternwd_pairs*
A list of [pattern, working_directory] pairs.
Default: >
	let g:autocwd_patternwd_pairs = []
<

*g:autocwd_not_update_defaultwd_for*
autocwd.vim set the default working directory to the return value of the getcwd()
function when you leave the current buffer.
This behavior assumes that the change of the CWD is caused by a user action
(e.g., :cd command).
As this behavior does not work correctly when a window changes the CWD 
internally (mostly for other plugin windows), this option provides a way to 
specify such exceptional cases.
For example, the ControlP plugin window internally changes the CWD.
If you find such cases, please let me know to apply them as the default value
of this option.
Default: >
	let g:autocwd_not_update_defaultwd_for = ['ControlP']
<

*g:autocwd_repodirs*
A list of repository directories for special keyword '*REPO*'.
Default: >
	let g:autocwd_repodirs = ['.git', '.hg', '.svn']
<

==============================================================================
6. Changelog                                            *autocwd-changelog*

1.0.0                       2014/06/24
    - first version
1.1.0                       2014/08/07
    - change the name to autocmd.vim from CWDPattern
1.2.0                       2014/10/09
    - add special keyword '*REPO*' that can be used in predefined working_directory.
    now you can set working directory to relative path from the repository directory.
1.3.0                       2014/12/28
    - add window selecting prompt to AutoCMDPrint command
1.3.1                       2015/01/21
    - Print working directory in absolute path
