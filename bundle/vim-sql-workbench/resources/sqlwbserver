#!/usr/bin/env python
#

from __future__ import with_statement
from optparse   import OptionParser

import commands
import datetime
import os
import uuid
import socket
import re
import string
import shlex
import sys
import thread
import time
import subprocess

class SQLWorkbench(object):
    profile = None
    port = 5000
    results = {}
    debug = 0
    vim = 'vim'
    tmp = "/tmp"
    clock = datetime.datetime.now()
    quit       = False
    lock       = thread.allocate_lock()
    executing = thread.allocate_lock()
    processing = thread.allocate_lock()
    new_loop = thread.allocate_lock()
    prompt_pattern_begin = '^[a-zA-Z_0-9\\.]+(\\@[a-zA-Z_0-9]+)?\\>[ \s\t]*'
    prompt_pattern = prompt_pattern_begin + '$'
    buff = ''
    dbe_connections = {}
    identifier = None

    def parseCustomCommand(self, command):
        if command[0] == 'identifier':
            self.identifier = command[1]
        #end if
    #end def parseCustomCommand

    def gotCustomCommand(self, text):
        pattern = '^!#(identifier|end)[ \\s\\t]*=[ \\s\\t]*([A-Za-z_0-9#]+)[ \\s\\t\\n\\r]*$'
        p = re.search(pattern, text)
        if p != None:
            return [p.group(1), p.group(2)]
        #end if
        return None
    #end def gotCustomCommand

    def getCaller(self, identifier = None):
        if identifier == None:
            i = self.identifier
        else:
            i = identifier
        #end if
        return re.search('^([^#]+)#?([^\\r\\n]*)[\\n\\r]?$', i)
    #end def getVimServerName

    def toVim(self, cmd):
        if self.identifier == None:
            return 
        #end if
        p = self.getCaller()
        if p != None:
            vim_server = p.group(1)
            _cmd = '%s --servername %s -u NONE -U none --remote-expr "%s"' % (self.vim, vim_server, cmd)
            if self.debug:
                print "SENDING TO VIM: " + _cmd
            #end if
            os.system(_cmd)
        #end if
    #end def toVim

    def prepareResult(self, text):
        lines = text.split("\n")
        result = ''
        record = 0
        i = 0
        to_add_results = False
        pattern1 = '-- auto[ \\s\\t\\r\\n]*$' 
        pattern2 = '-- end auto[ \\s\\t\\r\\n]*$' 
        for line in lines:
            if re.search(self.prompt_pattern_begin, line) != None and record == 0:
                record = 1
            #end if

            if re.search(pattern1, line) != None:
                record = 2
            #end if

            if record == 1 and re.search(pattern1, line) == None and re.search(pattern2, line) == None:
                if re.search('send_to_vim', line) == None:
                    if i < len(line) - 1:
                        if re.search('^\\-\\-[\\-\\+\\s\\t ]+$', lines[i + 1]):
                            to_add_results = True
                            result += "--results--"
                        #end if
                    #end if

                    p = re.search('^\\(([0-9]+) Row[s]?\\)', line)
                    if p != None:
                        to_add_results = False
                        result = result.replace('--results--', 
                                '\n==============================================================================\n' + 
                                'Query returned ' + p.group(1) + ' row' + ('s' if int(p.group(1)) > 1 else '') + '\n')
                    else:
                        result = result + line + "\n"
                    #end if
                #end if
            #end if
            i += 1

            if re.search(pattern2, line) != None:
                record = 1
            #end if
        #end for

        if to_add_results:
            result = result.replace('--results--', 
                    '\n==============================================================================\n')
        #end if

        return result
    #end def prepareResult

    def spawnDbeConnection(self, profile, conn):
        cmd = "%s -feedback=true -showProgress=false -profile=%s" % (self.cmd, profile)
        pipe = subprocess.Popen(shlex.split(cmd), stdin = subprocess.PIPE, stdout = subprocess.PIPE, bufsize = 1)
        conn.send('DISCONNECT')
        self.dbe_connections[profile] = pipe
        print "OPENING DBE CONNECTION: " + cmd
        while 1:
            with self.lock:
                if self.quit: break
            #end with
            time.sleep(0.3)
        #end while
        pipe.stdin.write("exit\n")
    #end def spawnDbeConnection

    def dbExplorer(self, conn):
        profile = ''
        char = ''
        while char != '\n':
            char = conn.recv(1)
            if (char != '\n' and char != '\r'):
                profile += char
            #end if
        #end while
        if not (profile in self.dbe_connections):
            thread.start_new_thread(self.spawnDbeConnection, (profile, conn))
            while (not profile in self.dbe_connections):
                time.sleep(0.1)
            #end while
        else:
            pipe = self.dbe_connections[profile]
            data = conn.recv(4096)
            if (data):
                data += "wbvardef send_to_vim = 1;\n"
                pipe.stdin.write(data)
                result = self.receiverDbe(pipe)
                conn.send(self.prepareResult(result))
            #end if
        #end if
    #end def dbExplorer

    def searchResult(self, conn):
        data = conn.recv(4096)
        if not data: 
            return
        #end if
        p = self.getCaller(data)
        if p == None:
            return
        #end if

        key = p.group(1) + "#" + p.group(2)
        if key in self.results:
            conn.send(self.prepareResult(self.results[key]))
            del self.results[key]
        #end if
    #end def searchResult

    def receiveData(self, conn, pipe):
        with self.processing:
            self.identifier = None
            cont = True
            while 1:
                data = conn.recv(4096)
                if not data: 
                    break
                #end if
                lines = data.split("\n")
                for line in lines:
                    if re.search('^!#', line) != None:
                        command = self.gotCustomCommand(line)
                        if command != None:
                            self.parseCustomCommand(command)
                            if command[0] == 'end':
                                cont = False
                                break
                            #end if
                        #end if
                    else:
                        self.clock = datetime.datetime.now()
                        if line != '':
                            pipe.stdin.write(line + "\n")
                        #end if
                    #end if
                #end for
                if not cont:
                    break
                #end if
            #end while
            with self.new_loop:
                pipe.stdin.write("wbvardef send_to_vim = 1;\n")
                if self.identifier == None:
                    with self.executing:
                        data = self.prepareResult(self.buff)
                        conn.send(data)
                    #end with
                else:
                    with self.executing:
                        p = self.getCaller()
                        if self.debug:
                            print "RESULT STORED FOR %s" % p.group(1) + "#" + p.group(2)
                        #end if
                        if p != None:
                            self.toVim('sw#got_async_result(\\"%s\\")' % p.group(2))
                        #end if
                    #end with
                #end if
            #end with
        #end with
    #end def receiveData

    def newConnection(self, conn, pipe):
        data = conn.recv(3)
        if data == 'COM':
            self.receiveData(conn, pipe)
        elif data == 'RES':
            self.searchResult(conn)
        elif data == 'DBE':
            self.dbExplorer(conn)
        #end if
        conn.close()
    #end def newConnection

    def monitor(self, pipe, port):
        HOST = '127.0.0.1'   # Symbolic name meaning all available interfaces

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
         
        try:
            s.bind((HOST, port))
        except socket.error , msg:
            print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
            sys.exit()
             
        s.listen(10)
         
        #now keep talking with the client
        while 1:
            #wait to accept a connection - blocking call
            conn, addr = s.accept()
            if self.debug:
                print 'Connected with ' + addr[0] + ':' + str(addr[1])
            #end if

            thread.start_new_thread(self.newConnection, (conn, pipe))

            with self.lock:
                if self.quit:
                    break
                #end if
            #end with
        #end while
        s.close()
    #end def monitor

    def receiverDbe(self, pipe):
        time = ''
        line = ''
        buff = ''
        while re.search('wbvardef send_to_vim = 1', line) == None and re.search('using :send_to_vim', line) == None:
            line = pipe.stdout.readline()
            buff += line
            if self.debug:
                sys.stdout.write(line)
                sys.stdout.flush()
            #end if
        #end while
        return buff
    #end def receiverDbe

    def receiver(self, pipe):
        first_prompt = False
        record_set = False
        time = ''
        while True:
            with self.new_loop:
                line = ''
                self.buff = ''
            #end with
            with self.executing:
                while re.search('send_to_vim', line) == None:
                    line = pipe.stdout.readline()
                    if re.search(self.prompt_pattern_begin, line) != None:
                        if not first_prompt:
                            first_prompt = True
                            self.buff = ''
                        else:
                            self.buff += "\n" + time + "\n"
                        #end if
                    #end if
                    if re.search('^[\\-\\+]+$', line):
                        time = "SQL execution time: %.2g seconds" % (datetime.datetime.now() - self.clock).total_seconds() 
                        self.clock = datetime.datetime.now()
                    #end if
                    self.buff += line
                    if self.debug:
                        sys.stdout.write(line)
                        sys.stdout.flush()
                    #end if
                #end while
                if self.identifier != None:
                    if self.identifier in self.results:
                        self.results[self.identifier] += "\n" + self.buff
                    else:
                        self.results[self.identifier] = self.buff
                    #end if
                    self.buff = ''
                #end if
            #end with
            with self.lock:
                if self.quit: break
            #end with
        #end while
    #end def receiver

    def main(self):
        if self.cmd == None:
            print "You have to set the sql workbench command. Please see the help. "
            sys.exit(1)
        #end if

        cmd = "%s -feedback=true -showProgress=false" % (self.cmd)
        if (self.profile != None):
            cmd += " -profile=%s" % self.profile
        #end if
        print "OPENING: " + cmd
        pipe = subprocess.Popen(shlex.split(cmd), stdin = subprocess.PIPE, stdout = subprocess.PIPE, bufsize = 1)

        thread.start_new_thread(self.receiver, (pipe,))
        thread.start_new_thread(self.monitor,  (pipe, self.port))

        try:
            while True:
                if pipe.poll() != None:
                    self.quit = True
                    break
                time.sleep(0.1)
            #end while
        except KeyboardInterrupt, ex:
            with self.lock:
                self.quit = True
        #end try...except
        time.sleep(0.3)
    #end def main
#end class SQLWorkbench

if __name__ == "__main__":
    obj = SQLWorkbench()
    parser = OptionParser()
    parser.add_option("-t", "--tmp",   help="The location of tmp folder",    dest="tmp",     default="/tmp")
    parser.add_option("-p", "--profile",   help="The sql workbench profile",    dest="profile",     default=None)
    parser.add_option("-c", "--command",   help="The command to launch the sql workbench console",    dest="cmd",     default=None)
    parser.add_option("-v", "--vim",   help="The path to the vim executable", dest="vim",     default='vim')
    parser.add_option("-o", "--port",   help="The port on which to send the commands", dest="port",     default='5000', type = "int")
    parser.add_option("-d", "--debug",   help="The debuging mode", dest="debug", default='0')
    (options,args) = parser.parse_args(sys.argv[1:], obj)
    obj.args = args
    obj.main()
#end if

# vim:set et ts=4 sw=4:
#EOF
