#!/usr/bin/env python
#

from __future__ import with_statement
from optparse   import OptionParser

import commands
import datetime
import os
import socket
import re
import string
import shlex
import sys
import thread
import time
import subprocess

class SQLWorkbench(object):
    servername = "vim"
    profile = None
    uid = None
    cmd = None
    buffer_id = None
    port = None
    debug = 0
    instance_id = None
    custom_command_pattern = '(ping|buffer_id[ \\s\\t]*=[ \\s\\t]*[0-9]+|instance_id[ \\s\\t]*=[ \\s\\t]*[0-9]+)'
    vim = 'vim'
    tmp = "/tmp"
    clock = datetime.datetime.now()
    who = None
    initialization = True
    buff = ''
    quit       = False
    lock       = thread.allocate_lock()
    lastFile   = ''
    prompt_pattern_begin = '^[a-zA-Z_0-9]+(\\@[a-zA-Z_0-9]+)?\\>[ \s\t]*'
    prompt_pattern = prompt_pattern_begin + '$'
    buffer_id_pattern = '[\\.a-zA-Z_0-9]+\\@[a-zA-Z_0-9]+?\\>[ \s\t]*\/\*([0-9]+)#([0-9]+)\*\/'

    def sendToWB(self, data, pipe):
        self.toRead = len(data)
        pipe.tochild.write(data)
    #end def sendToWB

    def receiveData(self, conn, pipe):
        self.line = ''
        self.buff = ''
        while 1:
            data = conn.recv(4096)
            if not data: 
                break
            #end if
            lines = data.split("\n")
            for line in lines:
                if re.search('^!#', line) != None:
                    command = self.gotCustomCommand(line)
                    if command != None:
                        self.parseCustomCommand(command)
                    #end if
                else:
                    self.clock = datetime.datetime.now()
                    if line != '':
                        pipe.stdin.write(line + "\n")
                        #pipe.tochild.write(line + "\n")
                    #end if
                #end if
            #end for
        #end while
        if self.debug:
            print "DISCONNECT"
        #end if
        pipe.stdin.write("wbvardef send_to_vim = 1;\n")
    #end def receiveData

    def monitor(self, pipe):
        HOST = '127.0.0.1'   # Symbolic name meaning all available interfaces

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
         
        try:
            s.bind((HOST, self.port))
        except socket.error , msg:
            print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
            sys.exit()
             
        s.listen(10)
         
        #now keep talking with the client
        while 1:
            #wait to accept a connection - blocking call
            conn, addr = s.accept()
            if self.debug:
                print 'Connected with ' + addr[0] + ':' + str(addr[1])
            #end if

            self.receiveData(conn, pipe)
            #thread.start_new_thread(self.receiveData, (conn, pipe))
             
            with self.lock:
                if self.quit:
                    break
                #end if
            #end with
        #end while
        s.close()
    #end def monitor

    def gotPrompt(self, line):
        return re.search(self.prompt_pattern, line) != None
    #end def gotPrompt

    def gotBufferId(self, line):
        return re.search(self.buffer_id_pattern + '$', line) != None
    #end def gotBufferId

    def gotCustomCommand(self, text):
        p = re.search('^!#[ \\s\\t]*' + self.custom_command_pattern + '[ \\s\\t\\n]*$', text)
        if p != None:
            return p.group(1)
        #end if
        return None
    #end def gotCustomCommand

    def parseCustomCommand(self, command):
        p = re.search('^(instance_id|buffer_id)[ \\s\\t]*=[\\s \\t]*([0-9]+)[ \\s\\t]*$', command)
        if p != None:
            if p.group(1) == 'instance_id':
                self.instance_id = p.group(2)
            elif p.group(1) == 'buffer_id':
                self.buffer_id = p.group(2)
            #end if
        #end if
    #end def parseCustomCommand

    def toSendToVim(self, line):
        return re.search("Variable send_to_vim", line) != None
    #end def toSendToVim

    def addExeTime(self):
        lines = self.buff.split("\n")
        if re.search('^SQL execution time', lines[len(lines) - 2]) == None:
            self.buff += "\nSQL execution time: %.2g seconds" % (datetime.datetime.now() - self.clock).total_seconds() + "\n"
            self.clock = datetime.datetime.now()
        #end if
    #end def addExeTime

    def prepareResult(self):
        result = ''
        lines = self.buff.split("\n")
        skip_2 = False
        if re.match('^[ \\s\\t]*$', lines[0]) != None and re.match('^SQL execution time', lines[1]) != None:
            skip_2 = True
        #end if
        do_add = True
        for i in range(len(lines) - 2):
            if skip_2 and i < 2:
                continue
            #end if
            line = lines[i]
            if re.search('-- auto[\\n\\t\\s ]*$', line) != None:
                do_add = False
            #end if
            if do_add and re.search('wbvardef send_to_vim = 1', line) == None:
                result += line + "\n"
            #end if
            if re.search('-- end auto[\\n\\s\\t ]*$', line) != None:
                do_add = True
            #end if
        #end for

        self.buff = result
    #end def prepareResult

    def processResult(self):
        if self.instance_id != None and self.buffer_id != None:
            self.prepareResult()
            f = open('/tmp/sw-result-' + self.instance_id + '-' + self.buffer_id, 'w')
            f.write(self.buff)
            f.close()
            self.toVim('sw#got_async_result(\\"%s\\")' % self.buffer_id)
        #end if
        self.buff = ''
        self.buffer_id = None
        self.instance_id = None
        self.line = ''
    #end def processResult

    def parseLine(self, line):
        if self.gotPrompt(line):
            if self.initialization:
                self.initialization = False
                self.buff = ''
                self.line = ''
                if self.debug:
                    sys.stdout.write(line)
                #end if
                self.toVim('sw#server#new(' + str(self.port) + ')')
            else:
                pattern = self.prompt_pattern_begin + '.*[^ \\s\\t;]+'
                self.addExeTime()
            #end if
        #end if
        if self.toSendToVim(line):
            self.processResult()
        #end if
    #end def parseLine

    def receiver(self, pipe):
        line = ''
        while True:
            if self.initialization:
                char = pipe.stdout.read(1)
                line += char
                if char == "\n":
                    if self.debug:
                        sys.stdout.write(line)
                    #end if
                    line = ''
                #end if
            else:
                line = pipe.stdout.readline()
                if re.search(self.prompt_pattern_begin, line) != None:
                    self.addExeTime()
                #end if
                self.buff += re.sub(self.prompt_pattern, '', re.sub('^\\.\\.\\> ', '', line))
                if self.debug:
                    sys.stdout.write(line)
                    sys.stdout.flush()
                #end if
            #end if

            self.parseLine(line)

            with self.lock:
                if self.quit: break
            #end with
        #end while
    #end def receiver

    def sender(self, pipe):
        while True:
            char = sys.stdin.read(1)
            pipe.tochild.write(char)
            with self.lock:
                if self.quit:
                    pipe.tochild.write('exit;\n')
                    break
                #end if
            #end with
        #end while
    #end def sender

    def toVim(self, cmd):
        _cmd = '%s --servername %s -u NONE -U none --remote-expr "%s"' % (self.vim, self.servername, cmd)
        if self.debug:
            print "SENDING TO VIM: " + _cmd
        #end if
        os.system(_cmd)
    #end def toVim

    def main(self):
        if self.cmd == None:
            print "You have to set the sql workbench command. Please see the help. "
            sys.exit(1)
        #end if
        if self.port == None:
            print "You have to set the server port. Please see the help. "
            sys.exit(1)
        #end if
        self.servername = self.servername.upper()
        # self.createCmdPipe()

        #servers = commands.getoutput(self.vim + " -u NONE -U NONE --serverlist")
        servers = subprocess.Popen([self.vim, '--serverlist'], stdout=subprocess.PIPE).communicate()[0]
        servers = servers.split("\n")

        if not self.servername in servers:
            print "The vim server with this instance does not exists"
            sys.exit(1)
        #end if

        cmd = "%s -feedback=true" % (self.cmd)
        if (self.profile != None):
            cmd += " -profile=%s" % self.profile
        #end if
        print "OPENING: " + cmd
        pipe = subprocess.Popen(shlex.split(cmd), stdin = subprocess.PIPE, stdout = subprocess.PIPE, bufsize = 1)
        #pipe = popen2.Popen3(cmd, capturestderr=False, bufsize=0)

        thread.start_new_thread(self.receiver, (pipe,))
        #thread.start_new_thread(self.sender,   (pipe,))
        thread.start_new_thread(self.monitor,  (pipe,))

        try:
            while True:
                if pipe.poll() != None:
                    self.quit = True
                    break
                time.sleep(0.1)
            #end while
        except KeyboardInterrupt, ex:
            with self.lock:
                self.quit = True
        #end try...except
        time.sleep(0.3)
        self.toVim('sw#server#remove(\\"%s\\")' % self.port)
    #end def main
#end class SQLWorkbench

if __name__ == "__main__":
    obj = SQLWorkbench()
    parser = OptionParser()
    parser.add_option("-s", "--server", help="GVIM Server Name", dest="servername", default="vim")
    parser.add_option("-t", "--tmp",   help="The location of tmp folder",    dest="tmp",     default="/tmp")
    parser.add_option("-p", "--profile",   help="The sql workbench profile",    dest="profile",     default=None)
    parser.add_option("-c", "--command",   help="The command to launch the sql workbench console",    dest="cmd",     default=None)
    parser.add_option("-v", "--vim",   help="The path to the vim executable", dest="vim",     default='vim')
    parser.add_option("-o", "--port",   help="The port to bind the server", dest="port",     default='5000', type = "int")
    parser.add_option("-d", "--debug",   help="The debuging mode", dest="debug", default='0')
    (options,args) = parser.parse_args(sys.argv[1:], obj)
    obj.args = args
    obj.main()
#end if

# vim:set et ts=4 sw=4:
#EOF
